<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Blog API Client</title>
  <link rel="stylesheet" href="style.css" />
  <style>body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 20px;
    background: #f4f4f4;
  }
  
  header {
    background: #333;
    color: #fff;
    padding: 20px 0;
    text-align: center;
  }
  
  main {
    max-width: 800px;
    margin: 20px auto;
  }
  
  #post-form {
    background: #fff;
    padding: 20px;
    margin-bottom: 20px;
    border: 1px solid #ccc;
    box-shadow: 0 0 5px rgba(0,0,0,0.1);
  }
  
  input, textarea {
    width: 100%;
    margin: 10px 0;
    padding: 10px;
    font-size: 1rem;
    border: 1px solid #ccc;
    border-radius: 4px;
  }
  
  button {
    padding: 10px 20px;
    background: #333;
    color: #fff;
    border: none;
    cursor: pointer;
    margin-top: 10px;
  }
  
  button:hover {
    background: #555;
  }
  
  .post {
    background: white;
    padding: 15px;
    margin-bottom: 15px;
    border: 1px solid #ccc;
    border-radius: 5px;
  }
  
  .post h3 {
    margin: 0 0 10px;
  }
  
  .post p {
    margin-bottom: 10px;
  }
  
  .post button {
    margin-right: 10px;
  }
  </style>
</head>
<body>

  <header>
    <h1>Blog RESTful API</h1>
  </header>

  <main>
    <section id="post-form">
      <h2>Create a New Post</h2>
      <input type="text" id="title" placeholder="Post Title" />
      <textarea id="content" placeholder="Post Content"></textarea>
      <button onclick="createPost()">Create Post</button>
    </section>

    <section>
      <h2>All Blog Posts</h2>
      <div id="posts"></div>
    </section>
  </main>

  <script src="script.js"></script>
  <script>// âœ… CHANGE THIS to your actual API URL
    const API_URL = 'http://localhost:5000/api/posts'; // or deployed API endpoint
    
    // Load all posts
    async function getPosts() {
      try {
        const response = await fetch(API_URL);
        const posts = await response.json();
    
        const postsDiv = document.getElementById('posts');
        postsDiv.innerHTML = '';
    
        posts.forEach(post => {
          const postElement = document.createElement('div');
          postElement.className = 'post';
    
          postElement.innerHTML = `
            <h3>${post.title}</h3>
            <p>${post.content}</p>
            <button onclick="deletePost('${post._id}')">Delete</button>
            <button onclick="editPost('${post._id}', '${post.title}', \`${post.content}\`)">Edit</button>
          `;
    
          postsDiv.appendChild(postElement);
        });
      } catch (error) {
        console.error('Error fetching posts:', error);
      }
    }
    
    // Create a new post
    async function createPost() {
      const title = document.getElementById('title').value.trim();
      const content = document.getElementById('content').value.trim();
    
      if (!title || !content) {
        return alert('Title and content are required!');
      }
    
      try {
        const response = await fetch(API_URL, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ title, content })
        });
    
        if (!response.ok) throw new Error('Failed to create post');
    
        document.getElementById('title').value = '';
        document.getElementById('content').value = '';
        getPosts();
      } catch (error) {
        console.error(error);
        alert('Failed to create post.');
      }
    }
    
    // Delete a post
    async function deletePost(id) {
      if (!confirm('Are you sure you want to delete this post?')) return;
    
      try {
        const response = await fetch(`${API_URL}/${id}`, {
          method: 'DELETE'
        });
    
        if (!response.ok) throw new Error('Failed to delete');
    
        getPosts();
      } catch (error) {
        console.error(error);
        alert('Error deleting post.');
      }
    }
    
    // Edit a post
    async function editPost(id, oldTitle, oldContent) {
      const newTitle = prompt('Edit title:', oldTitle);
      const newContent = prompt('Edit content:', oldContent);
    
      if (!newTitle || !newContent) return;
    
      try {
        const response = await fetch(`${API_URL}/${id}`, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ title: newTitle, content: newContent })
        });
    
        if (!response.ok) throw new Error('Failed to update');
    
        getPosts();
      } catch (error) {
        console.error(error);
        alert('Error updating post.');
      }
    }
    
    // Load posts when page loads
    window.onload = getPosts;
    </script>
</body>
</html>
